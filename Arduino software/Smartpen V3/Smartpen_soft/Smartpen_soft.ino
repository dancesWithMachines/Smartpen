//Bibilioteki 
//#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// Ustwienia dla ekranu
#define OLED_RESET 4
Adafruit_SSD1306 display(128, 32, &Wire, OLED_RESET);


bool isScreenOn = false;
int multiplier = 0;
int y1 = A6;
int x2 = A7;
int y2 = A8;
int x1 = A9;
int x = 0;
int y = 0;

//Thinkz logo bitmap
const unsigned char thinkzLogo [] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xfd, 0x03, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x78, 0x3f, 0xfd, 0x03, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x1c, 0x1c, 0x78, 0x3f, 0xfc, 0x03, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x3c, 0x1e, 0x78, 0x3f, 0xfe, 0x03, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x7c, 0x1e, 0x78, 0x3f, 0xfe, 0x03, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x7c, 0x1f, 0x78, 0x3f, 0xfe, 0x03, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0xfc, 0x1f, 0x78, 0x3f, 0xfe, 0x03, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0xfc, 0x1f, 0xf8, 0x20, 0x7f, 0x03, 0xe0, 0x00, 0x7c, 0x1e, 0x0e, 0x00, 0x3f, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0xf8, 0x38, 0x3f, 0x03, 0xf0, 0x70, 0x7c, 0x1e, 0x3e, 0x70, 0x7f, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0xf8, 0x3c, 0x3f, 0x03, 0xf0, 0x78, 0x7c, 0x1c, 0x7e, 0xf0, 0x7f, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0xf8, 0x3c, 0x3f, 0x03, 0xf0, 0x78, 0x7c, 0x1c, 0xff, 0xe0, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0xf8, 0x3c, 0x3f, 0x07, 0xf0, 0x78, 0x7c, 0x1c, 0xff, 0xe0, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0xf8, 0x3c, 0x3f, 0x07, 0xf0, 0x78, 0x7c, 0x18, 0xff, 0xe1, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0xf8, 0x3c, 0x3f, 0x07, 0xf0, 0x78, 0x7c, 0x10, 0x7f, 0xc1, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0xf8, 0x3c, 0x3f, 0x07, 0xf0, 0x78, 0x7c, 0x10, 0x7f, 0xc1, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0xf8, 0x3c, 0x3f, 0x07, 0xf0, 0x78, 0x7c, 0x18, 0x3f, 0x83, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0xf8, 0x3c, 0x3f, 0x07, 0xf0, 0x78, 0x7c, 0x18, 0x3f, 0x83, 0xbf, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0xf8, 0x3c, 0x3f, 0x8f, 0xf0, 0x78, 0x7c, 0x18, 0x1f, 0x07, 0xbf, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0xf8, 0x3c, 0x3f, 0x8f, 0xf0, 0x78, 0x7c, 0x1c, 0x1f, 0x07, 0xbf, 0xff, 
  0xff, 0xff, 0xfc, 0x1f, 0xf8, 0x3c, 0x3f, 0xcf, 0xf0, 0x78, 0x7c, 0x1c, 0x0f, 0x0f, 0xbf, 0xff, 
  0xff, 0xff, 0xf8, 0x1f, 0xf8, 0x38, 0x1f, 0xcf, 0xf0, 0x70, 0x7c, 0x1e, 0x0e, 0x0f, 0x3f, 0xff, 
  0xff, 0xff, 0xf0, 0x07, 0xe0, 0x10, 0x0f, 0xdf, 0xc0, 0x20, 0x18, 0x0c, 0x06, 0x00, 0x3f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void setup() {
  Serial.begin(115200);
  Wire.begin();

  pinMode(A2, OUTPUT); //Buzzer
  //digitalWrite(A2, HIGH);
  
  setUpScreen();
  setScreenToLogo();
  
  
}

void loop() {
  multiplier = analogRead(A3)/100;  //Read multiplier value
  x = (readX())*multiplier/3;
  y = (readY())*multiplier/3;
  if (x<300*multiplier && y <300
  *multiplier)
    output(x, y, true);
  else
    output(0, 0, true);
  
}

//Sets up the screen / Konfiguracja poczÄ…tkowa ekranu
void setUpScreen () {
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
    Serial.println(F("!Error connecting with screen"));  
  } else {
    isScreenOn=true;
    display.clearDisplay();
  }
}

//Sets screen to Thinkz Logo / Ustawia ekran na logo thinkz
void setScreenToLogo (){
  if (isScreenOn)
    display.clearDisplay();
    display.drawBitmap(
      (display.width()  - 128 ) / 2,
      (display.height() - 32) / 2,
      thinkzLogo, 128, 32, 1);
    display.display();
}

//This is the serial output of arudino // To jest output dla arduino (serial)
void output(int XValue, int ZValue, bool isWriting) {
  Serial.print("X:");
  Serial.print(XValue);
  Serial.print("/Z:");
  Serial.print(ZValue);
  if (isWriting)
    Serial.println("/I:i//");
  else
    Serial.println("/I:n//");       
}

int readX(){
  pinMode(y1, INPUT);
  pinMode(x2, OUTPUT);
  pinMode(y2, INPUT);
  pinMode(x1, OUTPUT);
  
  digitalWrite(x2, LOW);
  digitalWrite(x1, HIGH);
  
  delay(5); //pause to allow lines to power up
  
  return analogRead(y1);
}

int readY(){
  pinMode(y1, OUTPUT);
  pinMode(x2, INPUT);
  pinMode(y2, OUTPUT);
  pinMode(x1, INPUT);
  
  digitalWrite(y1, LOW);
  digitalWrite(y2, HIGH);
  
  delay(5); //pause to allow lines to power up
  
  return analogRead(x2);
}
